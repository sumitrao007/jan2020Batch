State Management:
	- HTTP is stateless protocol.
		- Since connection is broken/closed after request, the info/state about the client is not maintained by the server. Hence it is also referred as "state-less" protocol.
	- Maintaining info/state of the client across its multiple requests by the server is called as "State Management".
	+ Client Side State Management:
		* Cookies
			- A webserver can assign a unique session ID as a cookie to each web client and for subsequent requests from the client they can be recognized using the recieved cookie.
			- This may not be an effective way because many time browser does not support a cookie, so I would not recommend to use this procedure to maintain the sessions.
			- Advantage of Cookies
				1 Simplest technique of maintaining the state.
				2 Cookies are maintained at client side.
			- Disadvantage of Cookies
				1 It will not work if cookie is disabled from the browser.
				2 Only textual information can be set in Cookie object.
		  
		- Query String i.e. URL rewriting 
			- You can append some extra data on the end of each URL that identifies the session, and the server can associate that session identifier with data it has stored about that session.
			- but which can be accessed at the web server to identify the client.
		
		- Hidden Form Fields
			- A web server can send a hidden HTML form field along with a unique session ID as follows
			<input type = "hidden" name = "sessionid" value = "12345">
			This entry means that, when the form is submitted, the specified name and value are automatically included in the GET or POST data. Each time when web browser sends request back, then session_id value can be used to keep the track of different web browsers.
			- but clicking on a regular does not result in a form submission, so hidden form fields also cannot support general session tracking.
			
	+ Server Side State Management:
		* Session
		* Application/ServletContext
Session -- HttpSession
	- session.setAttribute("key", value);	
	- value = session.getAttribute("key");
	- session.invalidate();
	
  - To overcome limitation of stateless protocol we used session management.Session is nothing but a particular period of time in our application it is basically the time between login & logout activity.
  - Data maintain throughout application is called session.
  - HTTP Session starts at the point of login if login creadentials are valid then we put important parameters in session object.When we logout any activity, we can terminate the session calling session.invalidate();method
  - Create session object using http request i.e. request.getsession()
  - To add information in session for that we use session.setAttribute("key", value); Method. This method accepts key & object form
  - To get information from the session we use value = session.getAttribute("key");
  method 